{"./":{"url":"./","title":"简介","keywords":"","body":"Lavarel 框架学习 Laravel是一套简洁，优雅的PHP WEB开发框架（PHP Web Framework）。 laravel是目前一个比较主流的框架，现在很多互联网的公司基本都在使用该框架。该框架是基于symfony【国外一款非常流行的框架：由于国内手册不是很齐全，没有多少公司使用】的一个国外的MVC框架。诞生于2011年6月11日 官网：https://laravel.com/ 中文官网：http://www.golaravel.com/ 中文社区：https://laravel-china.org/ Laravel框架的广告语： 为 WEB 艺术家创造的 PHP 框架 目前大部分的框架公共的特点（了解）： （1）单入口，所有的请求必须从单入口开始，主要是便于管理（统一的参数过滤） （2）MVC的思想（分层思想，主要是为了协同开发，实现后期的维护方便） （3）ORM 操作数据库（Object Relations Model ）：AR 模式 注意：Laravel框架有一个特点，所有的URL访问都必须事先定好路由规则。 本书是一本 完全开源，免费的电子文档！ 当然，除了附件以外~ "},"Laravel学习/环境配置/1.html":{"url":"Laravel学习/环境配置/1.html","title":"一、环境配置","keywords":"","body":"环境安装 PHP版本：大于5.6.4 PHP扩展： openssl.dll mysql.dll mbstring.dll fileinfo.dll（验证码代码依赖需要该扩展） curl.dll（主要用于请求的发送） Apache 扩展：deflate 和 rewrite 模块 php.exe添加到环境变量中，确保php -v一样 "},"Laravel学习/环境配置/2.html":{"url":"Laravel学习/环境配置/2.html","title":"Composer 介绍","keywords":"","body":"Composer 介绍 音乐指挥者 PHP中管理依赖的工具，声明完所依赖的工具库后，composer会帮我们安装这些依赖的库文件。 官网：https://getcomposer.org/ Windows下安装过程： 一键下载 安装时直接 next，下一步检查版本。 不代理，直接install 完成 备注：开启openssl扩展，需要指定php.exe，需要联网 打开命令行，输入 composer确认。 配置Composer 切换镜像： composer config -g repo.packagist composer https://packagist.phpcomposer.com 无任何提示 "},"Laravel学习/环境配置/3.html":{"url":"Laravel学习/环境配置/3.html","title":"composer 部署 laravel 项目（掌握）","keywords":"","body":"composer 部署 laravel 项目 Tips: shift + 右键可以打开资源管理器的 powershell composer create-project laravel/laravel --prefer-dist ./ 命令解释： composer : 表示执行composer程序； create-project ：通过 composer 去创建项目； laravel/laravel : 需要创建的项目名称； --prefer-dist : 优先下载压缩包的方式，而不是从 github上下载源码（Clone ）； /：表示创建的项目目录名称 eg:下载其他版本 composer create-project laravel/laravel=5.4.* ./ --prefer-dist "},"Laravel学习/环境配置/4.html":{"url":"Laravel学习/环境配置/4.html","title":"目录结构分析","keywords":"","body":"目录结构分析 拉到本文结尾速看 ​ (1) app 目录 : 项目的核心目录，主要用于存放核心代码，也包括控制器、模型。 比如控制器存放如下位置：app/Http/Controllers 模型文件存放位置，模型文件直接写在app目录下即可，但是也可以在该目录下建立其他目录用于专门存放模型文件，例如建立Admin目录专门存放后台需要的模型文件，建立Home目录存放前台模型文件目录： (2) bootstrap目录，laravel启动目录 autoload.php 文件用于自动载入需要的类文件。 (3) config目录，项目的配置目录，主要存放配置文件，比如数据库的配置 App.php：项目主要配置文件； Auth.php：用于定义用户认证（登录）的配置文件； Database.php：针对数据库的配置； Filesystems.php：上传文件、文件存储需要使用到的配置文件； (4) database目录，数据迁移目录 存储跟数据表相关的操作类文件（迁移文件【创建数据表的类文件】、种子文件【存放一些数据表的数据填充文件】）。 （5）public目录，项目的入口文件和系统的静态资源目录（css,img,js,uploads） 后期使用的外部静态文件（js、css、图片等）都需要放到 Public 目录下 当然重点的是项目单一入口文件也在这个目录下。因此后续配置虚拟主机的时候需要将站点位置指定到public下. （6）resources**目录，存放视图文件，还有就是语言包文件的目录** Lang目录：语言包目录（如果项目需要本地化则需要配置语言包） Views目录：视图文件存储目录（视图文件也可以分目录管理） （7）routes目录，是定义路由的目录，web.php是定义路由的文件 （8）storage目录，主要是存放缓存文件和日志文件，注意，如果在linux环境下，该目录需要有可写权限。（后期用户上传文件如果存在本地则也在storage下） App：存放的用户上传的文件 Framework：框架运行时的缓存文件 Logs：日志目录 （9）vendor目录，主要是存放第三方的类库文件，laravel思想主要是共同的开发，不要重复的造轮子（例如，里面可能存在验证码类，上传类，邮件类），该目录还存放laravel框架的源码。注意如果要使用composer软件管理的，composer下载的类库都是存放在该目录下面的。 （10）.env文件：主要是设置一些系统相关的环境配置文件信息。config目录里面的文件配置内容一般都是读取该文件里面的配置信息（config里面的配置项的值基本都是来自.env文件）。 （11）artisan脚手架文件，主要用于生成的代码的（自动生成），比如生成控制器，模型文件等。 执行命令：#php artisan 需要执行的指令 要求1：php必须添加环境变量，并且保证版本； 要求2：artisan必须存在命令行当前的工作路径下； （12）composer.json依赖包配置文件 声明当前需要的软件依赖，但是不能删除，composer需要使用。 需要重点掌握的目录（频繁使用） 目录 作用 app 保存模型文件（默认） app/Http/Controllers 保存控制器文件 resources/views 保存视图文件 config 配置文件目录 routes 存放路由文件 database/migrations 存放数据库迁移文件（操作数据表结构） database/seeds 存放数据库种子文件（模拟测试数据） "},"Laravel学习/环境配置/5.html":{"url":"Laravel学习/环境配置/5.html","title":"启动方式","keywords":"","body":"启动方式 方式一：Larvavel 框架提供了更简单的方式启动项目（相比配置apche） #php artisan serve 此时得到结果：http://127.0.0.1:8000 说明laravel已经启动了，访问端口是8000。该种启动方式跟apache没有关系的。 需要注意：一旦使用该方式则小黑窗（cmd）不能关闭的，一旦关闭则服务也跟随关闭，网站也就访问不了。 个人不推荐使用： ​ ①能够跑php代码，但是不启动数据库。 ​ ②该方式启动后，如果修改了项目的配置.env的话，则需要重新启动才会生效。 使用 wamp或lamp环境 虚拟主机配置：（虚拟主机 ≠ 虚拟机） 修改apcahe的虚拟主机vhost的配置文件： 修改hosts文件（线上叫DNS域名解析）： 重启apache。访问效果： "},"Laravel学习/路由入门/0.html":{"url":"Laravel学习/路由入门/0.html","title":"二、路由入门","keywords":"","body":"Laravel入门使用（路由） 什么是路由：将用户的请求按照事先规划的方案提交给指定的控制器或者功能函数来进行处理。【通俗的讲，路由就是访问地址形式】 在博客中，当我们在URL地址中，传递p、c、a三个参数时，系统会自动跳转到指定模型中指定控制器的指定方法，这些处理过程都是由框架自动完成的。但是，在Laravel框架中，其并没有指定固定参数，其路由必须要手工进行配置。 "},"Laravel学习/路由入门/1.html":{"url":"Laravel学习/路由入门/1.html","title":"路由配置文件（掌握）","keywords":"","body":"路由配置文件 路由文件的位置: routes/web.php文件。 1. routes\\web.php配置文件中配置路由 （1）默认根路由 问题：为什么当我们在浏览器中访问虚拟域名http://**域名**时，如何显示Laravel5？ 答：主要是受到web.php路由的影响，当我们访问http://**域名**，系统会自动跳转到web.php路由，然后查看是否有定位到根目录下的get请求，找到如下代码： （2）路由定义格式： Route::请求方式（'请求的URL',匿名函数或控制响应的方法） 比如请求域名下根目录 Route::get('/',function(){return 'hello world}) 函数的返回值，就是请求的响应。 又比如请求：http://域名/home地址则路由写成： Route::get('/home',function(){return '您当前访问的是/home地址'}) 访问效果： (3) 请求方式有哪些？ 常用的记住四个：get/post/match/any Get表示支持get请求方式的路由； Post表示支持post请求方式的路由； Match表示匹配固定（自己定义）的请求方式的路由； Any表示匹配任意请求方式的路由； 语法上match比get/post/any多一个参数： Route::match(匹配的请求类型,地址,回调); 匹配请求类型要求是数组格式的声明（建议使用短数组）。 "},"Laravel学习/路由入门/2.html":{"url":"Laravel学习/路由入门/2.html","title":"路由参数","keywords":"","body":"路由参数 路由参数其实就是给路由传递参数。 参数分为必选参数和可选参数。 路由参数的传递通过路由地址中的“{参数名}”的形式来进行传递，该形式是必选参数的形式，可以选的则使用“{参数名?}”。 表现结果： 补充：除了通过定义路由的方式来传递路由参数以外，还可以通过“？”形式传递参数，例如： http://www.1112.com/user2?id=11111 这种写法不需要将参数部分写进路由文件web.php中。 "},"Laravel学习/路由入门/3.html":{"url":"Laravel学习/路由入门/3.html","title":"路由别名","keywords":"","body":"路由别名 路由别名相当于在路由定义的时候，为路由起了一个别名，在以后的程序中可以通过这个别名来获取路由的信息。 例如：已有路由 Route::any('/test5',function(){ ​ echo \"当前的用户id是\" . $_GET['id']; }) -> name(‘名字’); 调用该路由则可以写成：route(‘名字’); 查看系统已经有的路由命令：#php artisan route:list "},"Laravel学习/路由入门/4.html":{"url":"Laravel学习/路由入门/4.html","title":"路由群组","keywords":"","body":"路由群组（理解） 比如后台有如下路由 /admin/login /admin/logout /admin/index /admin/user/add /admin/user/del ..... 他们的共同点是，都有/admin/前缀，为了管理方便，可以把他们放到一个路由分组中。 使用prefix属性指定路由前缀， 比如，你想要为所有路由URIs前面添加前缀admin Route::group(['prefix' => 'admin'], function () { Route::get(test1, function () { //匹配 \"/admin/test1\" URL }); }); 语法：Route::group(公共属性数组,回调函数); 在后期还会接触到middleware属性。 "},"Laravel学习/控制器使用/1.html":{"url":"Laravel学习/控制器使用/1.html","title":"三、控制器使用","keywords":"","body":"控制器文件写在哪里？ app\\Http\\Controllers "},"Laravel学习/控制器使用/2.html":{"url":"Laravel学习/控制器使用/2.html","title":"如何命名","keywords":"","body":"控制器文件如何命名？ 案例文件： 大驼峰的命名方式+Controller.php 例如，如果需要创建一个商品goods控制器，则命名为：GoodsController.php "},"Laravel学习/控制器使用/3.html":{"url":"Laravel学习/控制器使用/3.html","title":"如何书写","keywords":"","body":"结构代码如何书写？ 注意：其控制器基础结构代码，不需要自己去手动编写，可以通过artisan命令行来自动生成。 因此需要记住对应的命令： #php artisan make:controller 控制器名（大驼峰）Controller关键词 例如：使用artisan命令创建TestController.php文件。先确定命令： #php artisan make:controller TestController 其中已经写好的结构代码： "},"Laravel学习/控制器使用/4.html":{"url":"Laravel学习/控制器使用/4.html","title":"控制器路由","keywords":"","body":"控制器路由(项目以该方式为主) 即，如何使用路由规则调用控制器下的方法，而不再走回调函数。 路由设置格式基本相同，只是将匿名函数换成‘控制器类名 @ 方法名’ 定义格式如下： Route::请求方法(路由表达式,控制器@方法') 例如：在Test控制器中创建test1方法，其中输出phpinfo信息 编写路由规则： 设定路由：/home/test/test1 /p/c/a 查看效果： "},"Laravel学习/控制器使用/5.html":{"url":"Laravel学习/控制器使用/5.html","title":"分目录管理","keywords":"","body":"控制器是否可以分目录管理？【支持】 支持的初步判断原因就是在初始化项目之后，其Controllers目录下就存在Auth目录，而这个目录就是用于分目录管理的。 例如：需要创建前台分组，在前台平台中创建IndexController.php文件；同时建立后台的分组，再创建后台的IndexController.php。 ①先建立相关的区分目录 ②创建控制器文件（使用artisan命令创建） 在创建的时候需要在命令指定控制器所存放的目录。 创建好的控制器其命名空间等问题，artisan已经解决了。 ③编写前后台Index方法的测试代码 ④编写对应的路由 Route::请求类型(路由表达式,控制器@方法) 结论：通过测试得出，在 laravel中控制器是可以分目录管理的。 "},"Laravel学习/控制器使用/6.html":{"url":"Laravel学习/控制器使用/6.html","title":"接收用户输入（掌握）","keywords":"","body":"接收用户输入 接收用户输入的类：Illuminate\\Support\\Facades\\Input Facades ：“门面”的意思。门面是介于一个类的实例化与没有实例化中间的一个状态。其实是类的一个接口实现。在这个状态下可以不实例化类但是可以调用类中的方法。说白了就是静态方法。 Input::get(‘参数的名字’, ‘如果参数没有被传递使用该默认值’) Input::all(): 获取所有的用户的输入 Input::get(''): 获取单个的用户的输入 Input::only([ ]): 获取指定几个用户的输入 Input::except([ ]): 获取指定几个用户的输入以外的所有的参数 Input::has('name')：判断某个输入的参数是否存在 上述方法即既可以获取get中的信息，也可以获取post中信息。 在laravel中如果需要使用facades的话，但是又不想写那么长的引入操作： Use Illuminate\\Support\\Facades\\Input 则可以在 config/app.php 中定义长串的别名（在aliases数组中定义别名）： 编写测试的路由： 测试代码： 测试结果： 测试代码： 在laravel中友好输出函数：dd() 作用：dump+die，后续的代码不会执行。 提示：在laravel 中不仅仅是Input 门面可以获取用户的输入，Request 门面也可以获取用户输入的，其语法和Input 一样，也存在get 、all 、only 等方法。 "},"Laravel学习/操作数据库/0.html":{"url":"Laravel学习/操作数据库/0.html","title":"四、DB类操作数据库","keywords":"","body":"DB类操作数据库（重点） 按照MVC 的架构，对数据的操作应该放在 Model 中完成，但如果不使用Model，我们也可以用 laravel框架提供的 DB 类操作数据库。而且，对于某些极其复杂的sql，用Model 已经很难完成，需要开发者自己手写sql语句，使用用 DB 类去执行原生sql。 laravel 中 DB 类的基本用法DB::table('tableName') 获取操作tableName表的实例。 觉得有点枯燥，放张图，继续看！ "},"Laravel学习/操作数据库/1.html":{"url":"Laravel学习/操作数据库/1.html","title":"创建数据表和配置（掌握）","keywords":"","body":"创建数据表和配置 建立数据库： 建数据库的方式： ​ ①sql语句 ​ ②图形界面 （1）创建数据库和测试表 （2）数据库在laravel框架中的配置 在.env文件里面， 也可以在config目录下面的database.php文件里面配置，使用env函数，表示先从env文件里面获取，如果获取成功则使用，如果获取失败，则使用env函数的第二个参数。 注意：如果是php artisan serve方式启动的，修改了配置文件，则需要重新启动，才能读取修改后的配置文件；如果是wamp/lamp等环境则不需要重启。 （3）在Test控制器中引入DB门面； DB门面在app.php中已经定义别名DB，可以直接use，不需要写太长空间。 （4）定义增删改查需要的路由； 增加：/home/test/add 删除：/home/test/del 修改：/home/test/update 查询：/home/test/select "},"Laravel学习/操作数据库/2.html":{"url":"Laravel学习/操作数据库/2.html","title":"增","keywords":"","body":"增 - Insert 对数据库中的某个表增加数据主要有两个函数可以实现，分别是insert()和insertGetId() insert(数组)可以同时添加一条或多条，返回值是布尔类型。 insertGetId(一维数组)，只能添加一条数据，返回自增的id。 注意：DB::table('无前缀的表名') -> insert(); 向member表同时添加多条数据， 增加一条记录： 数据表的数据插入结果： "},"Laravel学习/操作数据库/5.html":{"url":"Laravel学习/操作数据库/5.html","title":"删","keywords":"","body":"删 - delete(了解) 在删除中，有两种方式：物理删除（本质就是删除）、逻辑删除（本质是修改） 数据删除可以通过delete函数和truncate函数实现， Delete表示删除记录； Truncate表示清空整个数据表； DB::table('table_name')->where('id','1')->delete(); 例如：删除id小于20的记录 返回值表示受到影响的行数 "},"Laravel学习/操作数据库/3.html":{"url":"Laravel学习/操作数据库/3.html","title":"改","keywords":"","body":"改 - update 数据修改可以使用update()、increment()和decrement()函数来实现。 Update表示可以修改整个记录中的全部字段； Increment和decrement表示修改数字字段的数值（递增或者递减），典型的应用：记录登录次数、积分的增加； 案例：把id=1的名称，改名为‘张三丰’ ->where()->update([ ]) Where语法： ->where(字段,运算符,值) 如果运算符为“=”，则第二个参数可以不写 其返回的结果表示受到影响的行数。 案例：把id=1的用户年龄字段值加10；【了解】 DB::table(' member')->increment('votes'); 每次+1 DB::table(' member')->increment('votes', 5); 每次+5 DB::table(' member')->decrement('votes'); 每次-1 DB::table(' member')->decrement('votes', 5); 每次-5 "},"Laravel学习/操作数据库/4.html":{"url":"Laravel学习/操作数据库/4.html","title":"查","keywords":"","body":"查 - Select （1）取出基本数据 案例1：获取member表中所有的数据 DB::table('member')->get(); //相当于select * from member; 返回值是一个集合对象， 返回对象： 完成遍历取出的数据： Get查询的结果每一行的记录是对象的形式，不是数组。 案例2：获取id ->where()->get(); 注意：where方法之后继续调用where方法。 -> where() -> where() -> where().. 这个语法是并且（and）关系语法。 -> where() -> orWhere() -> orWhere()… 这个语法是或者（or）关系语法。 Orwhere方法的参数与where一致。 案例2：获取id19的数据 （2）取出单行数据 DB::table('member')->where('id','1')->first();//返回值是一个对象 等价于limit 1 （3）获取某个具体的值（一个字段） DB::table('member')->where('id','1')->value('name'); （4）获取某些字段数据（多个字段） $users = DB::table('member')->select('name', 'email')->get(); $users = DB::table('member')->select('name as user_name')->get(); （5）排序操作 DB::table('member')->orderBy('age','desc')->get(); （6） 分页操作 DB::table('member')->limit(3)->offset(2)->get(); Limit：表示限制输出的条数 Offset：从什么地方开始 组合起来等价于limit 5,5 "},"Laravel学习/操作数据库/6.html":{"url":"Laravel学习/操作数据库/6.html","title":"执行","keywords":"","body":"执行任意的SQL语句（了解） （1）执行任意的insert update delete语句【影响记录的语句使用statement语法】 DB::statement(“insert into member values(null,’’)”); （2）执行任意的select语句【不影响记录的语句使用select语法】 $res = DB::select(\"select * from member\"); "},"Laravel学习/视图操作/0.html":{"url":"Laravel学习/视图操作/0.html","title":"五、视图操作","keywords":"","body":"视图写在哪里 resources/views "},"Laravel学习/视图操作/1.html":{"url":"Laravel学习/视图操作/1.html","title":"命名与渲染","keywords":"","body":"视图文件的命名与渲染 （1）文件名习惯小写（建议小写） （2）文件名的后缀是 .blade.php（因为laravel里面有一套模板引擎就是使用blade，可以直接使用标签语法， 也可以使用原生的php语法显示数据。） （3）需要注意的是也可以使用.php结尾，但是这样的话就不能使用laravel提供的标签语法显示数据，只能使用原生语法 显示数据 两个视图文件同时存在，则.blade.php后缀的优先显示。 案例：编写一路由地址，调用控制器的test3方法，展示视图test3文件（创建2个，一个以.blade.php结尾，另外一个.php结尾） 编写控制器方法： 展示视图的方法： Return view(‘视图文件的名称’); 视图可以进行分目录管理的，例如需要展示home/test/test3视图，则可以写成： Return view(‘home/test/test3’) 当然也支持点写法：view(‘home.test.test3’) 展示方法： "},"Laravel学习/视图操作/2.html":{"url":"Laravel学习/视图操作/2.html","title":"变量（掌握）","keywords":"","body":"变量分配与展示 语法： ①view(模板文件名称, 数组 ) 数组就是需要分配的变量集合，数组是一个键值数组，其键与变量名尽量一致 ②view(模板文件名称)->with(数组) ③view(模板文件名称)->with(名称,值)->with(名称,值) 使用view()方式渲染一个视图后，在.blade.php的视图文件中，模板中输出变量使用“ ”（变量名就是分配过来数组的键） 在视图中展示刚才传递的变量：。 扩展：compact函数使用（传参） Compact函数，是php内置函数跟laravel框架没有关系。作用主要是用于打包数组的。 语法：compact(‘变量名1’,’变量名2’,…); 因此刚才案例还可以写成： "},"Laravel学习/视图操作/3.html":{"url":"Laravel学习/视图操作/3.html","title":"函数（掌握）","keywords":"","body":"模板中直接使用函数 语法：{{函数名(参数1,参数2…)}} 说明：函数名可以是php 内置的，也可以是laravel 框架中定义的。 案例：在数据库中一般存储时间都是以时间戳去存储的，但是在页面上展示的时候不适合使用时间戳了。需要在展示的时候再对其进行格式化处理，如需要在视图中进行对其格式化则怎么写？（100%） 分析：在php中怎么格式化时间戳？使用date函数 语法：date(格式,时间戳) "},"Laravel学习/视图操作/4.html":{"url":"Laravel学习/视图操作/4.html","title":"语法标签","keywords":"","body":"循环与分支语法标签【重点】 // 在视图里面遍历数据【重点】 在laravel中模版中循环输出数据，则需要遵循语法： 案例：使用循环标签的语法，在视图中输出数据 ①定义路由 ②创建需要的方法，获取一些数据，传递给视图 ③创建需要的视图文件home.test.test4 输出的效果： 在此过程中需要注意的就是get查询到的结果集中每一条记录其实都是一个对象，因此在循环具体字段的时候需要注意使用对象调用属性的方式才可以获取其数据。 // 在视图里面可以执行if 判断【重点】 If语法在模版引擎中的写法： 案例：要求在php代码中（控制器的方法）动态输出今天的星期数字（1-7），将数字传递给视图，显示出今天是星期几，如假设传递的数字是7，则页面中要输出“星期天”【将数字转化成汉字】 可以使用N格式化标记输出今天的星期数字 控制器的代码： "},"Laravel学习/视图操作/5.html":{"url":"Laravel学习/视图操作/5.html","title":"引入模板","keywords":"","body":"模版继承/包含【理解】 继承不仅仅在php类中存在，在视图中同样存在。一般是用于做有公共部分的页面。 案例：编写父级页面，再编写一个子页面（相当于php中的两个类） 编写父级页面： 语法：@yield(‘名字’) 在父级页面中的占位 编写子页面：（可以用之前的模版直接集成刚才父级页面，例如使用test4页面），编写的子页面不需要再去写头和尾，因为首尾父页面已经有了： 展示子页面； 继承语法： 子模版中按以下语法书写： @extends(‘需要继承的模版文件名’) **其名称要是完整的路径** 通过section标签绑定区块/部件到父级页面，区块名称就是父级页面yield标签的参数名。 @section(区块名称) 代码 @endsction 模版包含： 语法：@include( 模版文件名) 文件名不含后缀，语法类似view 方法参数 "},"Laravel学习/视图操作/6.html":{"url":"Laravel学习/视图操作/6.html","title":"引入文件","keywords":"","body":"外部静态文件引入方式（了解） 在写页面肯定会引入相关的外部文件（js、css、image），则会涉及到路径的问题。 以下面的这个app.css为例，看如何去引入该css文件： 以往的引入方式(推荐)： 在laravel中系统封装了一个方法asset： Asset方法中的参数可以是多级目录也可以是单级目录。 "},"Laravel学习/CSRF攻击/0.html":{"url":"Laravel学习/CSRF攻击/0.html","title":"六、CSRF攻击","keywords":"","body":"什么是CSRF攻击 CSRF是跨站请求伪造（Cross-site request forgery）的英文缩写： Laravel框架中避免CSRF攻击很简单：Laravel自动为每个用户Session生成了一个CSRF Token，该Token可用于验证登录用户和发起请求者是否是同一人，如果不是则请求失败。【该原理和验证码的原理是一致】 Laravel提供了一个全局帮助函数csrf_token来获取该Token值，因此只需在视图提交表单中添加如下HTML代码即可在请求中带上Token： \"> "},"Laravel学习/CSRF攻击/1.html":{"url":"Laravel学习/CSRF攻击/1.html","title":"如何避免（掌握）","keywords":"","body":"Laravel中如何避免CSRF攻击 案例：通过案例实现csrf的机制验证 ①创建两个路由，一个用于展示表单（get），另外处理请求（post） ②创建需要的方法 ③创建需要的简易表单 效果： ④提交效果（报错页面） 结论：通过刚才的案例，说明在 laravel 中csrf 验证机制默认是开启的。 ⑤解决报错问题（如何通过csrf验证） 解决思路：带上csrf需要token值，随着请求传递给后续的方法 针对csrf_token方法的简化：{{csrf_field()}} 具体的表现形式： 两者的区别： Csrf_token只是输出token的值 Csrf_field输出了一个整个的input隐藏域 在后期使用的时候怎么选择：大部分情况下可以自己根据情况选择。但是有一个情况下开发者是没有选择权限的，必须需要使用csrf_token的，这个情况就是使用异步提交表单的方式。 "},"Laravel学习/CSRF攻击/2.html":{"url":"Laravel学习/CSRF攻击/2.html","title":"排除例外路由","keywords":"","body":"从CSRF验证中排除例外路由 并不是所有请求都需要避免CSRF攻击，比如去第三方API获取数据的请求。 可以通过在VerifyCsrfToken（app/Http/Middleware/VerifyCsrfToken.php）中间件中将要排除的请求URL添加到$except属性数组中： 通过编写配置设置例外： 单个路由排除写法 多个元素之间通过“,”分割，遵循数组写法。 如果需要排除全部路由使用csrf的话，则可以写成： "},"Laravel学习/模型操作/0.html":{"url":"Laravel学习/模型操作/0.html","title":"七、模型操作","keywords":"","body":"模型操作（AR模式）【理解】 Laravel 自带的 Eloquent ORM提供了一个美观、简单的与数据库打交道的 ActiveRecord 实现，每张数据表都对应一个与该表进行交互的“Model模型”，模型允许你在表中进行数据查询，以及插入、更新、删除等操作。 AR模式三个核心（映射）： 每个数据表 与数据表进行交互的Model模型映射（实例化模型） 记录中的字段 与模型类的属性映射（给属性赋值） 表中的每个记录 与一个完整的请求实例映射（具体的CURD操作） "},"Laravel学习/模型操作/1.html":{"url":"Laravel学习/模型操作/1.html","title":"定义模型（掌握）","keywords":"","body":"定义模型 （1）定义位置 定义模型的位置，默认是在app目录下面，但是为了管理方便，建议分目录进行创建： （2）命名规则 本身laravel对模型的命名没有严格的要求，一般采用 表名( 首字母大写).php 比如：Member.php User.php Goods.php （3）创建模型 可以使用artisan命令； [project] > php artisan make:model Home/Member 创建好的初始代码： （4）定义模型注意事项（重点）； 第一：（必做）定义一个$table属性，值是不要前缀的表名，如果不指定则使用类名的复数形式作为表名。如果模型为Member模型在不指定table属性的情况下，其默认会去找members表。修饰词：protected 第二：（可选）定义$primaryKey属性，值是主键名称，如果需要使AR模式的find方法，则可能需要指定主键（Model::find(n)），在主键字段不是id的时候则需要指定主键。修饰词：protected 第三： （可选）定义$timestamps属性，值是false,如果不设置为false，则默认会操作表中的created_at和updated_at字段,我们表中一般没有这两个字段，所以设置为false,表示不要操作这两个字段。修饰词：public 第四：（可选）定义$fillable属性，表示使用模型插入数据时，允许插入到数据库的字段信息。修饰词：protected 注意：使用模型中 create 插入数据时，要设置$fillable 允许入库的字段，使用$guarded是设置排除入库的字段。 "},"Laravel学习/模型操作/2.html":{"url":"Laravel学习/模型操作/2.html","title":"引入模型（掌握）","keywords":"","body":"模型控制器中调用 引入Member模型类； 模型的使用：模型在控制器中的使用方式有2 种 ①直接像使用DB门面一样的操作方式：以调用静态方法为主的形式，该形式下模型不需要实例化，例如：Member::get() 等价于 DB::table(‘member’) -> get()； ②实例化模型然后再去使用模型类（普通） ​ 例如：$model = new Member();$model -> get(); "},"Laravel学习/模型操作/3.html":{"url":"Laravel学习/模型操作/3.html","title":"基本操作","keywords":"","body":"基本操作 首先要定义测试路由: "},"Laravel学习/模型操作/4.html":{"url":"Laravel学习/模型操作/4.html","title":"增（掌握）","keywords":"","body":"添加数据 在laravel里面完成数据的添加可以使用两种方式： 方式一（AR 模式）：使用AR模式必须要实例化模型 [不推荐] 注意：在laravel里面添加数据的时候，需要先实例化模型，然后为模型设置属性，最后调用save方法即可。 $member = new Member(); //映射关系1：将表映射到模型 $member-> name = value; //映射关系2：将字段映射到属性，属性名和字段名一致 $member -> age = value; … $member -> save(); //映射关系3：将记录映射到实例 模型中不要忘记关联数据表！： 上面的这种方法可以完成数据的插入，但是不建议使用。我们可以使用laravel提供的更高级的操作。 效果： 误删 方式二： 建立简易表单，表单中有姓名、年龄、邮箱的字段，要求能够提交。 首先，在控制器文件引入Request 这个类 use Illuminate\\Http\\Request; Request类的使用： ①对象传递 ②request语法（与input门面有点类似，方法名一致，但是input调用的是静态方法，而当前的不是） $request->all() $request->input('name'); +$request->only([‘name1’,’name2’…]) $request->except([‘name1’,’name2’…]) $request->has(‘name’) +$request->get(‘name’) 添加操作代码语法如下； Member::create($request->all()) //返回值是一个对象 注意：如果使用 create 方法，则需要在模型中定义fillable 属性，允许写入字段的定义，如果没有时间相关字段也需要禁用时间自动更新功能： 执行的结果： "},"Laravel学习/模型操作/7.html":{"url":"Laravel学习/模型操作/7.html","title":"删","keywords":"","body":"删除数据 注意：在laravel 里面如果要删除数据，如果需要使用AR 模式删除数据必须先根据主键id 查询对应的记录，返回一个模型对象，然后调用模型对象的delete 方法即可。 例如代码： $user = User::find($id); return $user->delete() ? 'ok' : 'fail'; 案例：使用AR模式删除id为9的记录 问题：DB里面的删除方式能否在模型中使用？【可以】 "},"Laravel学习/模型操作/6.html":{"url":"Laravel学习/模型操作/6.html","title":"改","keywords":"","body":"修改数据 ​ 在laravel 里面如果需要更新数据（ORM 模型方式），需要先调用模型的find 方法获取 对应的记录，返回一个模型对象，然后为该模型对象设置要更新的数据（对象的属性），最后调用save 方法即可。 例如： $user = User::find($id); $user->title = $_POST['title']; $user->content= $_POST['content']; return $user->save() ? 'OK' : 'fail'; 案例：实现ORM形式模型的修改操作。修改id为8 的用户的邮箱地址为admin@admin.com 查看结果： 问题：能不能用模型去update呢？ 答：可以使用update方法进行更新，也可以使用AR模式的方式进行更新。 "},"Laravel学习/模型操作/5.html":{"url":"Laravel学习/模型操作/5.html","title":"查","keywords":"","body":"查询数据 获取指定主键的一条数据 $info = Member::find(4); // 静态方法调用，获取主键为4的数据 其结果集默认是一个对象。 如果需要在laravel中对象的结果集转化成数组，则需要在最终添加方法的调用： -> get() -> toArray(); 所以刚才的案例，如需要数组结果，则可以写成： $data = Member::find(4) -> toArray(); 获取符合指定条件的第一条记录 Member::where(\"id\",'>',4)->first(); 查询多行并且指定字段 Member::all() Member::all([字段1,字段2]) //与get方法的区别，all不支持连接其他的辅助查询方法 相当于get方法 Member::get() Member::get([字段1,字段2]) 按条件查询指定多个字段 Member::where('id','>',2)->get([' 列 1',' 列 2']); //数组选列 Member::where('id','>',2)->select('列1','列2')->get(); //字符串选列 Member::where('id','>',2)->select( [' 列 1',' 列 2'] )->get(); //字符串选列 案例：测试在all方法之前，写一些辅助方法实现连贯操作 "},"Laravel学习/自动验证/0.html":{"url":"Laravel学习/自动验证/0.html","title":"八、自动验证","keywords":"","body":"自动验证（重点） ​ 一般一个框架都会提供自动验证的机制，在TP里面的验证的规则是写在模型里面进行验证的，但是自 laravel里面的思想有些不一样，它的验证规则可以在控制器里面，也可以单独的写一个专门的验证文件。并且laravel里面的验证不通过情况下的提示信息和表单数据是保存在session里面的，并且验证不通过的情况下会跳到上一个页面。 在前端页面中可以通过 JavaScript验证表单的数据有效性，但是如果用户的浏览器过低或者直接禁用js，则前端验证则可能会失效，这样就不能保证数据的有效性。所以后端也需做相应的验证操作，这个操作在laravel中称之为自动验证（在ThinkPHP中也有自动验证）。 "},"Laravel学习/自动验证/1.html":{"url":"Laravel学习/自动验证/1.html","title":"准备工作","keywords":"","body":"准备工作 ①可以使用有表单的页面（视图），此处可以使用附件的模版文件 创建需要的路由、方法 "},"Laravel学习/自动验证/验证方式一/1.html":{"url":"Laravel学习/自动验证/验证方式一/1.html","title":"验证方式一","keywords":"","body":"验证方式一（控制器方式验证：推荐） 建议去查看手册 扩展补充：如何得知一个请求类型？ 语法：Input::method() 返回GET或者POST "},"Laravel学习/自动验证/验证方式一/2.html":{"url":"Laravel学习/自动验证/验证方式一/2.html","title":"规则","keywords":"","body":"基本验证规则 required: 不能为空 max:255最长255个字符， min:1最少1个字符 email:验证邮箱是否合法 confirmed:验证两个字段是否相同，如果验证的字段是password,则必须输入一个与之匹配的password_confirmation字段 integer:验证字段必须是整型 ip:验证字段必须是IP地址 numeric 验证字段必须是数值 max:value 验证字段必须小于等于最大值，和字符串，数值，文件字段的size规则一起使用。 min:value 验证字段的最小值，对字符串、数值、文件字段而言，和size规则使用方式一致。 size:value 验证字段必须有和给定值value想匹配的尺寸，对字符串而言，value是相应的字符数目，对数值而言，value是给定整型值；对文件而言，value是相应的文件字节数。 string 验证字段必须是字符串 unique:表名，字段，需要排除的ID 注意：多个验证规则可以通过 \"|\" 字符进行隔开 语法：$this -> validate(数据对象,[数组形式的验证规则]); "},"Laravel学习/自动验证/验证方式一/3.html":{"url":"Laravel学习/自动验证/验证方式一/3.html","title":"错误信息","keywords":"","body":"输出错误信息 Create Post @if (count($errors) > 0) @foreach ($errors->all() as $error) @endforeach @endif 实际效果： "},"Laravel学习/自动验证/验证方式一/4.html":{"url":"Laravel学习/自动验证/验证方式一/4.html","title":"打印中文","keywords":"","body":"把输出效果转换成中文 由于中文和英文都是属于语言范畴，如果要切换提示文字，则需要有中文语言包的支持。目前框架只有en语言包，则需要其他语言包需要去下载。 网址：https://packagist.org composer主要的代码托管网站 在官网搜索laravel-lang 注意：后期下载软件依赖的时候一般会综合一下下载量和收藏量进行下载选择。 ①需要寻找下载命令 安装命令：# composer require caouecs/laravel-lang:~3.0 ②使用composer进行安装 在项目根目录下运行上述的命令 ③使用方法 翻译： 语言包文件在vendor/caoue/laravel-lang中；将你需要的语言目录复制到resources/lang目录下即可。 将需要的语言包复制到语言包目录： 根据提示： 翻译：在文件（config/app.php）中修改locale的值，改成你需要使用的语言简称。 简称其实就是语言包的文件夹名称。 测试效果： 注意：并不是所有的字段都有对应的翻译（或者有的翻译可能不是很准确），如果想自己定义翻译，则需要去修改语言包文件代码。 修改后续的值，或者新增需要的元素： "},"Laravel学习/文件上传/0.html":{"url":"Laravel学习/文件上传/0.html","title":"九、文件上传","keywords":"","body":"文件上传 在laravel里面实现文件的上传是很简单的，压根不用引入第三方的类库，作者把上传作为一个简单的http请求看待的。使用时可以参考手册。 修改表结构，添加一个字段。 ALTER TABLE `member` ADD COLUMN `avatar` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL AFTER `email`; 创建添加数据的表单和路由 添加路由：/home/test/test14 创建展示视图的方法并且展示视图 创建视图页面并且添加 csrf_token 回顾：要想表单能够上传（此处不考虑异步方式），则表单应该具备哪些要求？ 答： a. 具有form标签，method必须为post，必须具备enctype属性； b. 至少有一个input类型为file类型； c. 得具备一个提交按钮； 在控制器中，添加上传业务处理逻辑 关于上传错误状态码error的取值：0-7 ，但是没有5 ，0 表示成功。 问题：请你说出文件上传的本质（核心思想）？文件的移动，move_upload_file 更多的方法请访问： http://api.symfony.com/3.0/Symfony/Component/HttpFoundation/File/UploadedFile.html 思路： ​ a. 先去判断文件是否正常和存在 ​ b. 获取相关的信息（可选） ​ c. 保存文件（其实就是移动文件到新的目录） 获取文件的方式：既可以通过 file 方法来获取也可以通过动态属性来获取，二选一。 （4）创建上传文件的保存路径 关于项目中使用路径的说明： 如果路径是给php代码使用的，则路径建议使用“./”形式；如果路径是给浏览器使用的则建议使用“/”形式。 为了保存的文件不被覆盖，建议在保存文件的同时对文件名进行尽量唯一的重命名： （5）注意：如果使用的是create方法添加数据到数据表中，则这里还要修改一下模型里面的一个fillable属性，代表允许插入到数据库的字段 将数据写入数据表： 数据表的结果： 如果上传出现了错误，一定要使用获取错误信息的方法： "},"Laravel学习/数据表迁移和填充/0.html":{"url":"Laravel学习/数据表迁移和填充/0.html","title":"十二、迁移和填充","keywords":"","body":"数据表的迁移与填充 迁移：创建数据表的操作+删除数据表的操作 填充：往数据表里填充写入测试的数据（数据的插入操作） "},"Laravel学习/数据表迁移和填充/1.html":{"url":"Laravel学习/数据表迁移和填充/1.html","title":"迁移","keywords":"","body":"数据的迁移操作 在迁移过程中，操作可以分为两个部分：创建与编写迁移文件、执行迁移文件。 迁移文件的创建与编写 迁移文件默认的位置： 已经存在的2个文件，如果不打算使用系统自带的认证模块的话需要删除掉。 ①创建迁移文件 案例：需要创建试卷的数据表，假设数据表的名字叫做paper。迁移文件名：create_paper_table 创建的时候可以通过自动代码生成工具artisan命令来执行迁移文件的生成。 #php artisan make:migration 迁移文件名 Create a new migration file 迁移文件不需要分目录进行管理，可以直接书写名称即可。 php artisan make:migration create_paper_table 初始代码： Up方法表示创建数据表的方法 Down方法表示删除数据表的方法 ②编写迁移文件代码，让其能够实现数据表的创建（ up 方法）与删除（down 方法） 在写之前，可以参考项目初始化提供的user迁移文件： Schema门面（类）是用于操作数据表的门面，调用其具体的方法之后就可以实现创建数据表与删除数据表，语法如上。照搬上述语法实现试卷表paper的创建： 试卷表的字段分析： Id 表的主键，自增 Paper_name 试卷名称，唯一，varchar(100)，不为空 Total_score 试卷总分，整型数字，tinyint，默认为100 Start_time 试卷开始考试时间，时间戳类型（整型int） Duration 考试时间长度，单位分钟，整型tinyint Status 试卷是否启用的状态，1表示启用，2表示禁用，默认为1，tinyint类型 在创建数据表的列的时候遵循语法： $table 表示整个表的实例 语法：$table -> 列类型方法(字段名,[长度/值范围]) -> 列修饰方法([修饰的值]); 列类型方法的作用：指定列的名称并且设置列的类型长度或者其值范围（仅针对枚举类型） 修饰方法：主要是补充列的一些特征，例如有些列不能为空，或者有默认值等等 常见的修饰方法有： 常用的列类型： 创建数据表的迁移代码： 删除数据表的迁移代码： 执行迁移文件 执行分为up执行和down执行。 Up方法的执行： 如果在当前的项目中第一次执行迁移文件的话，则需要先去执行： #php artisan migrate:install 在执行过上述的命令之后，在数据表中会多出一个数据表，migrations 作用：用于创建记录迁移文件的记录数据表。 需要执行up方法，则需要执行命令：（注意：需要删除系统自带的迁移文件，只保留自己的） #php artisan migrate 【执行迁移文件的：创建数据表】 Down方法执行：（回滚操作，删除数据表） #php artisan migrate:rollback 【回滚最后一次的迁移操作，回滚操作不删除迁移文件】 回滚操作只删除迁移表中的记录和对应的数据表，其他操作不执行。 注意：删除（回滚）之后会删除上一个批次的迁移记录，并且同批次建立的数据表也会删除，但是迁移文件依旧存在，方便后期继续迁移（创建数据表）。 针对迁移文件名的提示：如果迁移文件已经创建好并且执行了，就不要去修改迁移文件的名称，容易出错的。 "},"Laravel学习/数据表迁移和填充/2.html":{"url":"Laravel学习/数据表迁移和填充/2.html","title":"填充","keywords":"","body":"数据表填充器 填充操作就是往数据表中写测试数据的操作（增加操作）。 1. 填充器（种子文件）的创建与编写 ①填充器默认的所在目录 ②创建填充器 #php artisan make:seeder 填充器名称 【约定俗成的写法：大写表名+TableSeeder】 例如：以paper表为例，则名称应该为PaperTableSeeder #php artisan make:seeder PaperTableSeeder 创建好的种子文件： ③【重点】编写填充器的代码，实现往数据表中写入数据 注意：在填充器文件中可以使用DB门面去新增数据，但是需要注意，DB门面在使用的时候不需要用户自己引入，一旦引入则报错，可以直接使用。建议使用DB门面方法写入新的数据 2.执行填充器文件 命令： #php artisan db:seed --class=需要执行的种子文件名（不带.php） 种子文件不像迁移文件，迁移操作有单独的对应关系表去记录，由于种子文件的执行没有任何的记录，所以在执行种子文件的时候需要指定需要执行的种子文件。 #php artisan db:seed --class=PaperTableSeeder 如果没任何提示则说明其执行成功。 执行之后数据表中的对应的数据就存在： 填充器的执行操作没有回滚一说，没有删除。如果需要回滚，则可以手动清空对应的数据表。 "},"Laravel学习/项目初始化/1.html":{"url":"Laravel学习/项目初始化/1.html","title":"十三、项目初始化","keywords":"","body":"创建laravel项目 确定项目站点位置： 通过composer进行创建： #composer create-project laravel/laravel=5.6.* --prefer-dist ./ "},"Laravel学习/项目初始化/2.html":{"url":"Laravel学习/项目初始化/2.html","title":"建立数据库","keywords":"","body":"建立数据库 创建数据的方式有很多种：可以通过pma、mysqlCLI方式、navicat等等 修改.env文件，配置数据库的连接操作： "},"Laravel学习/项目初始化/3.html":{"url":"Laravel学习/项目初始化/3.html","title":"本地化为中文","keywords":"","body":"设置网站本地化为中文 修改语言包的配置： 下载语言包：#composer require caouecs/laravel-lang:~3.0 将需要的语言包复制到指定的位置： 修改config/app.php文件中的配置locale： "},"Laravel学习/项目初始化/4.html":{"url":"Laravel学习/项目初始化/4.html","title":"设置时区","keywords":"","body":"设置项目使用的时区 修改系统默认的时区，修改配置文件：config/app.php配置项：timezone 配置项的值： Aisa/shanghai Aisa/chongqing PRC （People`s Republic of China） "},"Laravel学习/项目初始化/5.html":{"url":"Laravel学习/项目初始化/5.html","title":"清理项目","keywords":"","body":"清理项目（删除不需要的文件） 删除app/Http/Controllers/Auth目录，因为需要自定义登录逻辑 删除database/migrations/2014_10_12_000000_create_users_table.php database/migrations/2014_10_12_100000_create_password_resets_table.php 因为需要自定义用户表结构 同时也可以删除seeds目录下的初始文件： 删除resources/views/welcome.blade.php欢迎页面 在Public目录下的js、css文件夹也可以进行删除： "},"Laravel学习/项目初始化/6.html":{"url":"Laravel学习/项目初始化/6.html","title":"关闭严格模式","keywords":"","body":"关闭Mysql的严格模式 编辑config/database.php将strict由true修改为false 严格模式的功能说明 不支持对not null字段插入null值 不支持对自增长字段插入”值 不支持text字段有默认值 条件：PHP**版本>=7.0** 下载地址：https://packagist.org/packages/barryvdh/laravel-debugbar（laravel 5.5+） https://github.com/barryvdh/laravel-debugbar/tree/2.4（laravel 5.5-） 安装命令：composer require barryvdh/laravel-debugbar:~2.4 执行结果： 最后修改config/app.php文件进行配置provider和aliases数组 装好之后的效果（在页面的左下角会有一个按钮，可以点击，点击之后展开即可）： "},"Laravel学习/项目初始化/7.html":{"url":"Laravel学习/项目初始化/7.html","title":"安装debugbar","keywords":"","body":"安装debugbar工具条（可选） 条件：PHP 版本>=7.0 下载地址：https://packagist.org/packages/barryvdh/laravel-debugbar（laravel 5.5+） https://github.com/barryvdh/laravel-debugbar/tree/2.4（laravel 5.5-） 安装命令：composer require barryvdh/laravel-debugbar:~2.4 执行结果： 最后修改config/app.php文件进行配置provider和aliases数组 装好之后的效果（在页面的左下角会有一个按钮，可以点击，点击之后展开即可）： "},"Laravel学习/附件/0.html":{"url":"Laravel学习/附件/0.html","title":"附件","keywords":"","body":"附件使用说明 后面这些内容属于个人资料，请勿直接使用。如有需要，请注明下列内容： 相关作者:呼吸君 文章来源：https://zhuanlan.zhihu.com/c_200560703 谢谢~ "},"Laravel学习/附件/1.html":{"url":"Laravel学习/附件/1.html","title":"简易数据表","keywords":"","body":"Member表 create table member( id int primary key auto_increment, name varchar(32) not null, age tinyint unsigned not null, email varchar(32) not null )engine myisam charset utf8mb4; "},"Laravel学习/附件/2.html":{"url":"Laravel学习/附件/2.html","title":"简易表单","keywords":"","body":"Member 表单 {{csrf_field()}} 简单的表单 姓名: 年龄: 邮箱: "},"Laravel学习/附件/实验二.html":{"url":"Laravel学习/附件/实验二.html","title":"实验二学习报告（已完成）","keywords":"","body":" "},"Laravel学习/附件/3.html":{"url":"Laravel学习/附件/3.html","title":"完全实验手册（未完成）","keywords":"","body":"完全实验手册 一、项目内容 本实验主要是实现一个简单的“知乎”，使用 Laravel 完成这个项目。 二、内容拆分 本项目可拆分为两个模块—— 内容模块和用户模块 用户模块包括创建用户、登录、修改信息等内容 内容模块则包括了帖子的发布、修改、删除、评论等功能 三、具体实现分析 创建框架 搭建脚手架、 逻辑编写 测试 上线 四、实践 1、创建项目 新建一个文件夹（项目位置），进入后运行 composer create-project laravel/laravel=\"5.7.*\" ./ --prefer-dist 文件夹名是项目的名称，可以自定义 --prefer-dist 是压缩包文件，加快下载速度 laravel/laravel=\"5.7.*\"是指定下载版本 2、设置中文环境（可选） composer require caouecs/laravel-lang:~3.0 将需要的语言包复制到指定的位置： 修改config/app.php文件中的配置locale： 修改config/app.php文件中的时区timezone： 3、建立数据库 使用phpmyadmin,Navicat 都可以。 修改.env(项目根目录下)文件，配置数据库的连接操作： 编辑config/database.php将strict由true修改为false 开始编写用户模块 4、建立数据表模型 创建数据表的样式：creat_+表名+_table 根目录运行 php artisan make:migration create_user_table 删除掉其他的文件，并修改迁移文件： 执行迁移文件： 第一次执行前运行： php artisan migrate:install 然后就可以： php artisan migrate 检查一下，创建成功： 5、设置本地启动 虚拟主机设置，hosts设置（不多赘述，这是PHP基础） 将public设置为主页 启动查看： 6、定制布局 删除resouces\\views里面的php文件 建立布局文件夹layouts,放置页面基础布局 在bootstrap文件夹中放置 helpers.php文件并编写全局函数 route_class()[可选] 新建好页首、页脚部分blade文件并在主视图中引入。 7、定制主页 Laravel提供了一套用户认证组件，运行 php artisan make:auth "},"Laravel学习/附件/4.html":{"url":"Laravel学习/附件/4.html","title":"快速实验手册（已完成）","keywords":"","body":"1、创建项目 安装好composer后，新建一个文件夹，在里面执行 composer create-project laravel/laravel=\"5.7.*\" ./ --prefer-dist 2、数据库连接 接下来打开目录下的.env文件，配置数据库的连接操作。 配置完成后，执行 php artisan migrate:install 3、虚拟主机搭建 检查一下，无误后完成虚拟主机的配置（PHP基础）。 4、测试根站点 继续执行： php artisan make:auth 访问home站点，确认： 4、测试注册登录站点 继续执行： php artisan migrate 访问register站点，尝试注册 　５、实现邮件重置密码 修改.env和mail.php继续配置邮件 访问/password/reset测试 "},"Laravel学习/附件/5.html":{"url":"Laravel学习/附件/5.html","title":"快速实验手册的入门（未完成）","keywords":"","body":"快速入门 主页设置 打开 routes/web.php 路由文件会发现新增了两行： 登录注册相关路由都定义在了上面 Auth::routes()方法内。 登录成功 你可以通过在 LoginController 中，定义 redirectTo属性来自定义登录认证成功之后的跳转路径： 如果重定向路径需要自定义生成逻辑可以定义一个 redirectTo()方法来取代 redirectTo 属性： protected function redirectTo() { return '/path'; } 自定义验证/存储 要想修改新用户注册所必需的表单字段，或者自定义新用户字段如何存储到数据库，你可以修改 RegisterController 类。该类负责为应用验证输入参数和创建新用户。 RegisterController 的 validator 方法包含了新用户注册的验证规则，你可以按需要自定义该方法。 RegisterController 的 create 方法负责使用Eloquent ORM在数据库中创建新的 App\\User 记录。你也可以自定义该方法。 获取登录用户信息 可以通过 Auth 门面访问认证用户： "},"Laravel学习/附件/6.html":{"url":"Laravel学习/附件/6.html","title":"实验三汉化分析手册（未完成）","keywords":"","body":"实验三汉化分析手册（未完成） "}}